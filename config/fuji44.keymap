/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_bootloader_left {
            timeout-ms = <50>;
            key-positions = <0 12 24>;
            bindings = <&bootloader>;
        };

        combo_bootloader_right {
            bindings = <&bootloader>;
            key-positions = <11 23 35>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC    &kp Q  &kp W   &kp E             &kp R         &kp T               &kp Y      &kp U              &kp I      &kp O    &kp P     &kp BACKSPACE
&kp TAB    &kp A  &kp S   &kp D             &kp F         &kp G               &kp H      &kp J              &kp K      &kp L    &kp SEMI  &kp RETURN
&kp LSHFT  &kp Z  &kp X   &lt 3 C           &lt 2 V       &lt 1 B             &kp N      &kp M              &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                  &tog 2  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND    &kp SPACE  &kp RIGHT_COMMAND  &kp RALT   &tog 1
            >;
        };

        num {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &none         &none         &none         &none         &none     &none         &none   &none   &none   &none   &trans
&trans  &none         &none         &to 3         &to 2         &to 0     &none         &none   &none   &none   &none   &trans
                      &trans        &trans        &trans        &trans    &trans        &trans  &trans  &to 0
            >;
        };

        nav {
            bindings = <
&trans  &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT    &none      &none      &none   &none      &none  &trans
&trans  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT    &kp LEFT   &kp DOWN   &kp UP  &kp RIGHT  &none  &trans
&trans  &none  &none           &to 3           &to 0         &to 1              &none      &none      &none   &none      &none  &trans
               &to 0           &trans          &trans        &trans             &mkp LCLK  &mkp RCLK  &trans  &trans
            >;
        };

        sys {
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp LG(LS(NUMBER_4))  &kp PRINTSCREEN  &kp C_VOICE_COMMAND  &kp C_SLEEP    &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP
&trans                &none                 &none                 &none            &none                &none          &bt BT_SEL 0    &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &trans
&trans                &none                 &none                 &to 0            &to 2                &to 1          &none           &none             &none         &none         &none         &trans
                                            &trans                &trans           &trans               &trans         &trans          &trans            &trans        &trans
            >;
        };
    };
};
